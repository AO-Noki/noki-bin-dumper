name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Tipo de versÃ£o (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            asset_name: noki-linux
          - os: windows-latest
            asset_name: noki.exe
          - os: macos-latest
            asset_name: noki-macos
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          
      - name: Build with PyInstaller
        run: pyinstaller --onefile --name ${{ matrix.asset_name }} noki-dumper.py
          
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset_name }}
          path: dist/${{ matrix.asset_name }}*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        
      - name: Update Version
        id: version
        run: |
          VERSION=$(grep -Po "__version__ = \"\K[^\"]+" noki/__init__.py)
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
          
          case "${{ github.event.inputs.version_type }}" in
            major)
              ((version_parts[0]++))
              version_parts[1]=0
              version_parts[2]=0
              ;;
            minor)
              ((version_parts[1]++))
              version_parts[2]=0
              ;;
            patch)
              ((version_parts[2]++))
              ;;
          esac
          
          NEW_VERSION="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
          sed -i "s/__version__ = \".*\"/__version__ = \"$NEW_VERSION\"/" noki/__init__.py
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: Release v${{ steps.version.outputs.new_version }}
          files: |
            noki-linux/noki-linux
            noki.exe/noki.exe
            noki-macos/noki-macos
          draft: false
          prerelease: false
          generate_release_notes: true